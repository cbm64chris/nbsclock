package de.elmar_baumann.nb.slclock.alarmclock;

import javax.swing.Icon;
import org.openide.DialogDescriptor;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.util.ImageUtilities;
import org.openide.util.NbBundle;

/**
 * @author Elmar Baumann
 */
public class AlarmEventPanel extends javax.swing.JPanel {

    public static final String PROPERTY_RUN = "run";
    public static final String PROPERTY_SELECTED = "selected";
    private static final long serialVersionUID = 1L;
    private static final Icon ICON_START = ImageUtilities.loadImageIcon("de/elmar_baumann/nb/slclock/icons/start.png", false);
    private static final Icon ICON_PAUSE = ImageUtilities.loadImageIcon("de/elmar_baumann/nb/slclock/icons/pause.png", false);
    private AlarmEvent event;
    private final AlarmEventsModel model;

    public AlarmEventPanel(AlarmEvent event, AlarmEventsModel model) {
        if (event == null) {
            throw new NullPointerException("event == null");
        }
        if (model == null) {
            throw new NullPointerException("model == null");
        }
        this.event = event;
        this.model = model;
        initComponents();
        eventToGui();
    }

    private void eventToGui() {
        labelTime.setText(event.getTimeForGui());
        String displayName = event.getDisplayName();
        labelDisplayName.setText(displayName == null ? "" : displayName);
        setButtonIcon();
    }

    private void setButtonIcon() {
        buttonRun.setIcon(event.isRun() ? ICON_PAUSE : ICON_START);
    }

    private void toggleRun() {
        boolean old = event.isRun();
        synchronized (model) {
            event.setRun(!old);
        }
        setButtonIcon();
        firePropertyChange(PROPERTY_RUN, old, event.isRun());
    }

    private void editEvent() {
        AlarmEventEditPanel alarmEventEditPanel = new AlarmEventEditPanel(new AlarmEvent(event));
        DialogDescriptor dd = new DialogDescriptor(
                alarmEventEditPanel, // innerPane
                NbBundle.getMessage(AlarmClockPanel.class, "AlarmEventPanel.Edit.Title"), // title
                true, // modal
                new Object[]{DialogDescriptor.OK_OPTION}, //options
                DialogDescriptor.OK_OPTION, // initialValue
                DialogDescriptor.DEFAULT_ALIGN, // optionsAlign
                null, // helpCtx
                null //bl
        );
        if (DialogDisplayer.getDefault().notify(dd) == DialogDescriptor.OK_OPTION) {
            AlarmEvent oldEvent = event;
            event = alarmEventEditPanel.save();
            model.changeEvent(oldEvent, event);
            eventToGui();
        }
    }

    private void deleteEvent() {
        String msg = NbBundle.getMessage(AlarmClockPanel.class, "AlarmEventPanel.Delete.Confirm", event.getDisplayName());
        NotifyDescriptor nd = new NotifyDescriptor.Confirmation(msg, NotifyDescriptor.YES_NO_OPTION);
        Object result = DialogDisplayer.getDefault().notify(nd);
        if (result == NotifyDescriptor.YES_OPTION) {
            model.removeFromEvents(event);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonRun = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();
        buttonRemove = new javax.swing.JButton();
        labelTime = new javax.swing.JLabel();
        labelDisplayName = new javax.swing.JLabel();

        buttonRun.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/elmar_baumann/nb/slclock/icons/start.png"))); // NOI18N
        buttonRun.setToolTipText(org.openide.util.NbBundle.getMessage(AlarmEventPanel.class, "AlarmEventPanel.buttonRun.toolTipText")); // NOI18N
        buttonRun.setMargin(new java.awt.Insets(0, 0, 0, 0));
        buttonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRunActionPerformed(evt);
            }
        });

        buttonEdit.setText(org.openide.util.NbBundle.getMessage(AlarmEventPanel.class, "AlarmEventPanel.buttonEdit.text")); // NOI18N
        buttonEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEditActionPerformed(evt);
            }
        });

        buttonRemove.setText(org.openide.util.NbBundle.getMessage(AlarmEventPanel.class, "AlarmEventPanel.buttonRemove.text")); // NOI18N
        buttonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(buttonRun)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonEdit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRemove)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelTime)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelDisplayName)
                .addContainerGap(139, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(labelDisplayName)
                .addComponent(buttonRun)
                .addComponent(buttonRemove)
                .addComponent(buttonEdit)
                .addComponent(labelTime))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRunActionPerformed
        toggleRun();
    }//GEN-LAST:event_buttonRunActionPerformed

    private void buttonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRemoveActionPerformed
        deleteEvent();
    }//GEN-LAST:event_buttonRemoveActionPerformed

    private void buttonEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEditActionPerformed
        editEvent();
    }//GEN-LAST:event_buttonEditActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonRemove;
    private javax.swing.JButton buttonRun;
    private javax.swing.JLabel labelDisplayName;
    private javax.swing.JLabel labelTime;
    // End of variables declaration//GEN-END:variables
}
