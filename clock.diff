# This patch file was generated by NetBeans IDE
# Following Index: paths are relative to: C:\Users\ebaumann\Documents\test\nbsclock
# This patch can be applied using context Tools: Patch action on respective folder.
# It uses platform neutral UTF-8 encoding and \n newlines.
# Above lines and this line are ignored by the patching process.
Index: nbproject/genfiles.properties
--- nbproject/genfiles.properties Base (BASE)
+++ nbproject/genfiles.properties Locally Modified (Based On LOCAL)
@@ -1,8 +1,8 @@
-build.xml.data.CRC32=22a48557
+build.xml.data.CRC32=3988e19f
 build.xml.script.CRC32=7195e628
-build.xml.stylesheet.CRC32=a56c6a5b@1.46.2
+build.xml.stylesheet.CRC32=a56c6a5b@2.47.2
 # This file is used by a NetBeans-based IDE to track changes in generated files such as build-impl.xml.
 # Do not edit this file. You may delete it but then the IDE will never regenerate such files for you.
-nbproject/build-impl.xml.data.CRC32=22a48557
+nbproject/build-impl.xml.data.CRC32=3988e19f
 nbproject/build-impl.xml.script.CRC32=9e7c5086
-nbproject/build-impl.xml.stylesheet.CRC32=68e521fc@1.46.2
+nbproject/build-impl.xml.stylesheet.CRC32=68e521fc@2.47.2
Index: nbproject/project.xml
--- nbproject/project.xml Base (BASE)
+++ nbproject/project.xml Locally Modified (Based On LOCAL)
@@ -15,6 +15,14 @@
                     </run-dependency>
                 </dependency>
                 <dependency>
+                    <code-name-base>org.openide.util</code-name-base>
+                    <build-prerequisite/>
+                    <compile-dependency/>
+                    <run-dependency>
+                        <specification-version>8.19.1</specification-version>
+                    </run-dependency>
+                </dependency>
+                <dependency>
                     <code-name-base>org.openide.util.lookup</code-name-base>
                     <build-prerequisite/>
                     <compile-dependency/>
Index: src/de/elmar_baumann/nb/slclock/Bundle.properties
--- src/de/elmar_baumann/nb/slclock/Bundle.properties Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/Bundle.properties Locally Modified (Based On LOCAL)
@@ -2,6 +2,18 @@
 OpenIDE-Module-Long-Description=\
     NetBeans: Statusline Clock displays date and time in the IDE's status line\
     .\
-    \n\n* The refresh interval is 1 second\n* The date's and time's display format are DateFormat.SHORT.
+    \n\n* The refresh interval is 1 second
 OpenIDE-Module-Name=NetBeans: Statusline Clock
 OpenIDE-Module-Short-Description=Displays a clock in the IDE's status line
+DateFormat.Time.Short.DisplayName=Time short
+DateFormat.Time.Medium.DisplayName=Time medium
+DateFormat.Time.Long.DisplayName=Time long
+DateFormat.Date.Short.DisplayName=Date short
+DateFormat.Date.Medium.DisplayName=Date medium
+DateFormat.Date.Long.DisplayName=Date long
+DateFormat.DayOfWeek.Short.DisplayName=Day of week short
+DateFormat.DayOfWeek.Long.DisplayName=Day of week long
+StatusLinePreferencesPanel.radioButtonCustomPattern.text=&Default Format
+StatusLinePreferencesPanel.radioButtonDefaultPattern.text=&Custom Pattern as described in java.text.SimpleDateFormat Javadoc
+StatusLinePreferencesPanel.panelExample.border.title=Example
+StatusLinePreferencesPanel.buttonApply.text=&Apply
Index: src/de/elmar_baumann/nb/slclock/Bundle_de.properties
--- src/de/elmar_baumann/nb/slclock/Bundle_de.properties Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/Bundle_de.properties Locally New
@@ -0,0 +1,15 @@
+OpenIDE-Module-Display-Category=Base IDE
+OpenIDE-Module-Long-Description=\
+    NetBeans: Statusline Clock zeigt Datum und Uhrzeit an in der Statuszeile\
+    .\
+    \n\n* Das Aktualisierungs-Intervall ist 1 Sekunde
+OpenIDE-Module-Name=NetBeans: Statusline Clock
+OpenIDE-Module-Short-Description=Displays a clock in the IDE's status line
+DateFormat.Time.Short.DisplayName=Uhrzeit kurz
+DateFormat.Time.Medium.DisplayName=Uhrzeit mittel
+DateFormat.Time.Long.DisplayName=Uhrzeit lang
+DateFormat.Date.Short.DisplayName=Datum kurz
+DateFormat.Date.Medium.DisplayName=Datum mittel
+DateFormat.Date.Long.DisplayName=Datum lang
+DateFormat.DayOfWeek.Short.DisplayName=Wochentag kurz
+DateFormat.DayOfWeek.Long.DisplayName=Wochentag lang
Index: src/de/elmar_baumann/nb/slclock/DateFormatAndDelimiter.java
--- src/de/elmar_baumann/nb/slclock/DateFormatAndDelimiter.java Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/DateFormatAndDelimiter.java Locally New
@@ -0,0 +1,17 @@
+package de.elmar_baumann.nb.slclock;
+
+import java.text.DateFormat;
+
+/**
+ * @author Elmar Baumann
+ */
+final class DateFormatAndDelimiter {
+
+    final DateFormat dateFormat;
+    final String delimiter;
+
+    DateFormatAndDelimiter(DateFormat dateFormat, String delimiter) {
+        this.dateFormat = dateFormat;
+        this.delimiter = delimiter;
+    }
+}
Index: src/de/elmar_baumann/nb/slclock/DateFormatArray.java
--- src/de/elmar_baumann/nb/slclock/DateFormatArray.java Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/DateFormatArray.java Locally New
@@ -0,0 +1,44 @@
+package de.elmar_baumann.nb.slclock;
+
+import java.text.DateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+
+/**
+ * @author Elmar Baumann
+ */
+final class DateFormatArray {
+
+    private final List<DateFormatAndDelimiter> formatters = new ArrayList<DateFormatAndDelimiter>();
+
+    void addDateFormat(DateFormat dateFormat, String delimiter) {
+        addDateFormat(new DateFormatAndDelimiter(dateFormat, delimiter));
+    }
+
+    void addDateFormat(DateFormatAndDelimiter formatAndDelimiter) {
+        formatters.add(formatAndDelimiter);
+    }
+
+    List<DateFormatAndDelimiter> getFormatters() {
+        return Collections.unmodifiableList(formatters);
+    }
+
+    int getSize() {
+        return formatters.size();
+    }
+
+    DateFormatAndDelimiter get(int index) {
+        return formatters.get(index);
+    }
+
+    String format(Date date) {
+        StringBuilder sb = new StringBuilder();
+        for (DateFormatAndDelimiter formatter : formatters) {
+            sb.append(formatter.delimiter);
+            sb.append(formatter.dateFormat.format(date));
+        }
+        return sb.toString();
+    }
+}
Index: src/de/elmar_baumann/nb/slclock/StatusLineClock.java
--- src/de/elmar_baumann/nb/slclock/StatusLineClock.java Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/StatusLineClock.java Locally Modified (Based On LOCAL)
@@ -2,9 +2,6 @@
 
 import java.awt.BorderLayout;
 import java.awt.Component;
-import java.text.DateFormat;
-import java.text.MessageFormat;
-import java.text.SimpleDateFormat;
 import java.util.Date;
 import java.util.concurrent.Executors;
 import java.util.concurrent.ScheduledExecutorService;
@@ -21,24 +18,23 @@
 
 /**
  * Displays date and time in the status line.
+ *
  * @author Elmar Baumann
  */
 @ServiceProvider(service = StatusLineElementProvider.class)
 public final class StatusLineClock implements StatusLineElementProvider {
 
-    private static final String FORMAT_PATTERN = "  {0} {1} - {2}";
-    private static final DateFormat WEEKDAY_FORMAT = new SimpleDateFormat("E");
-    private static final DateFormat DATE_FORMAT = DateFormat.getDateInstance(DateFormat.SHORT);
-    private static final DateFormat TIME_FORMAT = DateFormat.getTimeInstance(DateFormat.SHORT);
     private static final int REFRESH_INTERVAL_MILLISECONDS = 1000;
-    private final JLabel clockLabel = new JLabel(getCurrentDateTimeString());
+    private final JLabel clockLabel;
     private final JPanel statusLinePanel = new JPanel(new BorderLayout());
     private final ScheduledExecutorService scheduler;
 
     public StatusLineClock() {
         scheduler = Executors.newSingleThreadScheduledExecutor(threadFactory);
+        DateFormatArray dateFormatArray = StatusLinePreferences.restoreDateFormatArray();
+        clockLabel = new JLabel(dateFormatArray.format(new Date()));
         initComponents();
-        scheduler.scheduleWithFixedDelay(clockLabelUpdater, 0, REFRESH_INTERVAL_MILLISECONDS, TimeUnit.MILLISECONDS);
+        scheduler.scheduleWithFixedDelay(new ClockLabelUpdater(dateFormatArray), 0, REFRESH_INTERVAL_MILLISECONDS, TimeUnit.MILLISECONDS);
     }
 
     private void initComponents() {
@@ -51,28 +47,34 @@
         return statusLinePanel;
     }
 
-    private static String getCurrentDateTimeString() {
-        Date now = new Date();
+    private class ClockLabelUpdater implements Runnable, StatusLinePreferencesListener {
 
-        return MessageFormat.format(FORMAT_PATTERN,
-                WEEKDAY_FORMAT.format(now),
-                DATE_FORMAT.format(now),
-                TIME_FORMAT.format(now));
+        private DateFormatArray dateFormatArray;
+
+        private ClockLabelUpdater(DateFormatArray dateFormatArray) {
+            this.dateFormatArray = dateFormatArray;
+            listen();
     }
-    private final Runnable clockLabelUpdater = new Runnable() {
 
+        private void listen() {
+            StatusLinePreferences.addListener(this);
+        }
+
         public void run() {
-            clockLabel.setText(getCurrentDateTimeString());
+            Date now = new Date();
+            clockLabel.setText(dateFormatArray.format(now));
         }
-    };
+
+        public void dateFormatChanged(DateFormatArray newFormat) {
+            dateFormatArray = newFormat;
+        }
+    }
     private final ThreadFactory threadFactory = new ThreadFactory() {
 
         @Override
         public Thread newThread(Runnable r) {
             Thread thread = new Thread(r);
-
             thread.setName("StatusLineClock: Displaying Date and Time in the Status Line");
-
             return thread;
         }
     };
Index: src/de/elmar_baumann/nb/slclock/StatusLinePreferences.java
--- src/de/elmar_baumann/nb/slclock/StatusLinePreferences.java Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/StatusLinePreferences.java Locally New
@@ -0,0 +1,113 @@
+package de.elmar_baumann.nb.slclock;
+
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.List;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArraySet;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import java.util.prefs.Preferences;
+
+import org.openide.util.NbPreferences;
+
+/**
+ * @author Elmar Baumann
+ */
+final class StatusLinePreferences {
+
+    private static final int COUNT_LIMIT = 25;
+    private static final String KEY_DATE_FORMAT_PATTERN_COUNT = "StatusLinePreferences.DateFormatPattern.Count";
+    private static final String KEY_DATE_FORMAT_PATTERN_PREFIX = "StatusLinePreferences.DateFormatPattern.";
+    private static final String KEY_DATE_FORMAT_DELIMITER_PREFIX = "StatusLinePreferences.Delimiter.";
+    private static final Set<StatusLinePreferencesListener> LISTENERS = new CopyOnWriteArraySet<StatusLinePreferencesListener>();
+
+    static DateFormatArray restoreDateFormatArray() {
+        if (!containsPattern()) {
+            return createDefaultDateFormatArray();
+        }
+        try {
+            DateFormatArray array = new DateFormatArray();
+            Preferences prefs = NbPreferences.forModule(StatusLinePreferences.class);
+            int count = prefs.getInt(KEY_DATE_FORMAT_PATTERN_COUNT, 0);
+            for (int i = 0; i < count; i++) {
+                String delimiter = prefs.get(KEY_DATE_FORMAT_DELIMITER_PREFIX + i, "");
+                String pattern = prefs.get(KEY_DATE_FORMAT_PATTERN_PREFIX + i, "");
+                array.addDateFormat(new SimpleDateFormat(pattern), delimiter);
+            }
+            return array;
+        } catch (Throwable t) {
+            Logger.getLogger(StatusLinePreferences.class.getName()).log(Level.SEVERE, null, t);
+            return createDefaultDateFormatArray();
+        }
+    }
+
+    static private boolean containsPattern() {
+        Preferences prefs = NbPreferences.forModule(StatusLinePreferences.class);
+        int count = prefs.getInt(KEY_DATE_FORMAT_PATTERN_COUNT, 0);
+        return count > 0;
+    }
+
+    static private DateFormatArray createDefaultDateFormatArray() {
+        DateFormatArray array = new DateFormatArray();
+        array.addDateFormat(new SimpleDateFormat("E"), "");
+        array.addDateFormat(DateFormat.getDateInstance(DateFormat.SHORT), " ");
+        array.addDateFormat(DateFormat.getTimeInstance(DateFormat.SHORT), " ");
+        return array;
+    }
+
+    static void persistDateFormatArray(DateFormatArray dateFormatArray) {
+        assertCountLimit(dateFormatArray);
+        clear();
+        Preferences prefs = NbPreferences.forModule(StatusLinePreferences.class);
+        List<DateFormatAndDelimiter> formatters = dateFormatArray.getFormatters();
+        int count = formatters.size();
+        prefs.putInt(KEY_DATE_FORMAT_PATTERN_COUNT, count);
+        for (int i = 0; i < count; i++) {
+            DateFormatAndDelimiter format = formatters.get(i);
+            if (format.dateFormat instanceof SimpleDateFormat) {
+                SimpleDateFormat simpleDateFormat = (SimpleDateFormat) format.dateFormat;
+                prefs.put(KEY_DATE_FORMAT_DELIMITER_PREFIX + i, format.delimiter);
+                prefs.put(KEY_DATE_FORMAT_PATTERN_PREFIX + i, simpleDateFormat.toPattern());
+            } else {
+                Logger.getLogger(StatusLinePreferences.class.getName()).log(Level.WARNING,
+                        "Unrecognized date format: {0}", format.dateFormat.getClass());
+            }
+        }
+        notifyDateFormatChanged(dateFormatArray);
+    }
+
+    static private void clear() {
+        Preferences prefs = NbPreferences.forModule(StatusLinePreferences.class);
+        prefs.remove(KEY_DATE_FORMAT_PATTERN_COUNT);
+        for (int i = 0; i < COUNT_LIMIT; i++) {
+            prefs.remove(KEY_DATE_FORMAT_DELIMITER_PREFIX + i);
+            prefs.remove(KEY_DATE_FORMAT_PATTERN_PREFIX + i);
+        }
+    }
+
+    static private void assertCountLimit(DateFormatArray dateFormatArray) {
+        int count = dateFormatArray.getSize();
+        if (count > COUNT_LIMIT) {
+            throw new IllegalArgumentException(
+                    "Count of patterns is limited to " + COUNT_LIMIT + ", but count is " + count);
+        }
+    }
+
+    static void addListener(StatusLinePreferencesListener listener) {
+        LISTENERS.add(listener);
+    }
+
+    static void removeListener(StatusLinePreferencesListener listener) {
+        LISTENERS.remove(listener);
+    }
+
+    private static void notifyDateFormatChanged(DateFormatArray dateFormatArray) {
+        for (StatusLinePreferencesListener listener : LISTENERS) {
+            listener.dateFormatChanged(dateFormatArray);
+        }
+    }
+
+    private StatusLinePreferences() {
+    }
+}
Index: src/de/elmar_baumann/nb/slclock/StatusLinePreferencesListener.java
--- src/de/elmar_baumann/nb/slclock/StatusLinePreferencesListener.java Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/StatusLinePreferencesListener.java Locally New
@@ -0,0 +1,9 @@
+package de.elmar_baumann.nb.slclock;
+
+/**
+ * @author Elmar Baumann
+ */
+interface StatusLinePreferencesListener {
+
+    void dateFormatChanged(DateFormatArray newFormat);
+}
Index: src/de/elmar_baumann/nb/slclock/StatusLinePreferencesPanel.form
--- src/de/elmar_baumann/nb/slclock/StatusLinePreferencesPanel.form Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/StatusLinePreferencesPanel.form Locally New
@@ -0,0 +1,197 @@
+<?xml version="1.0" encoding="UTF-8" ?>
+
+<Form version="1.5" maxVersion="1.8" type="org.netbeans.modules.form.forminfo.JPanelFormInfo">
+  <NonVisualComponents>
+    <Component class="javax.swing.ButtonGroup" name="buttonGroupPatterns">
+    </Component>
+  </NonVisualComponents>
+  <AuxValues>
+    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="1"/>
+    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
+    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="true"/>
+    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="true"/>
+    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
+    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
+    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
+    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
+  </AuxValues>
+
+  <Layout>
+    <DimensionLayout dim="0">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="0" attributes="0">
+                  <Group type="102" attributes="0">
+                      <Group type="103" groupAlignment="0" max="-2" attributes="0">
+                          <Component id="radioButtonCustomPattern" min="-2" max="-2" attributes="0"/>
+                          <Component id="radioButtonDefaultPattern" alignment="0" max="32767" attributes="0"/>
+                          <Group type="102" alignment="0" attributes="0">
+                              <Component id="comboBoxDateFormat0" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="comboBoxDelimiter0" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="comboBoxDateFormat1" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="comboBoxDelimiter1" min="-2" max="-2" attributes="0"/>
+                              <EmptySpace max="-2" attributes="0"/>
+                              <Component id="comboBoxDateFormat2" min="-2" max="-2" attributes="0"/>
+                          </Group>
+                          <Component id="textFieldCustomPattern" alignment="0" max="32767" attributes="0"/>
+                          <Component id="panelExample" max="32767" attributes="0"/>
+                      </Group>
+                      <EmptySpace min="0" pref="0" max="32767" attributes="0"/>
+                  </Group>
+                  <Group type="102" alignment="1" attributes="0">
+                      <EmptySpace min="0" pref="0" max="32767" attributes="0"/>
+                      <Component id="buttonApply" min="-2" max="-2" attributes="0"/>
+                  </Group>
+              </Group>
+              <EmptySpace max="-2" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+    <DimensionLayout dim="1">
+      <Group type="103" groupAlignment="0" attributes="0">
+          <Group type="102" alignment="0" attributes="0">
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="radioButtonCustomPattern" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Group type="103" groupAlignment="3" attributes="0">
+                  <Component id="comboBoxDateFormat0" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="comboBoxDelimiter0" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="comboBoxDateFormat1" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="comboBoxDelimiter1" alignment="3" min="-2" max="-2" attributes="0"/>
+                  <Component id="comboBoxDateFormat2" alignment="3" min="-2" max="-2" attributes="0"/>
+              </Group>
+              <EmptySpace type="unrelated" max="-2" attributes="0"/>
+              <Component id="radioButtonDefaultPattern" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="textFieldCustomPattern" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="panelExample" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="-2" attributes="0"/>
+              <Component id="buttonApply" min="-2" max="-2" attributes="0"/>
+              <EmptySpace max="32767" attributes="0"/>
+          </Group>
+      </Group>
+    </DimensionLayout>
+  </Layout>
+  <SubComponents>
+    <Component class="javax.swing.JRadioButton" name="radioButtonDefaultPattern">
+      <Properties>
+        <Property name="buttonGroup" type="javax.swing.ButtonGroup" editor="org.netbeans.modules.form.RADComponent$ButtonGroupPropertyEditor">
+          <ComponentRef name="buttonGroupPatterns"/>
+        </Property>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.i18n.form.FormI18nStringEditor">
+          <ResourceString bundle="de/elmar_baumann/nb/slclock/Bundle.properties" key="StatusLinePreferencesPanel.radioButtonDefaultPattern.text" replaceFormat="org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JComboBox" name="comboBoxDateFormat0">
+      <Properties>
+        <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="new DateFormatComboBoxModel()" type="code"/>
+        </Property>
+        <Property name="renderer" type="javax.swing.ListCellRenderer" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="dateFormatListCellRenderer" type="code"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JComboBox" name="comboBoxDelimiter0">
+      <Properties>
+        <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="new DelimiterComboBoxModel()" type="code"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JComboBox" name="comboBoxDateFormat1">
+      <Properties>
+        <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="new DateFormatComboBoxModel()" type="code"/>
+        </Property>
+        <Property name="renderer" type="javax.swing.ListCellRenderer" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="dateFormatListCellRenderer" type="code"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JComboBox" name="comboBoxDelimiter1">
+      <Properties>
+        <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="new DelimiterComboBoxModel()" type="code"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JComboBox" name="comboBoxDateFormat2">
+      <Properties>
+        <Property name="model" type="javax.swing.ComboBoxModel" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="new DateFormatComboBoxModel()" type="code"/>
+        </Property>
+        <Property name="renderer" type="javax.swing.ListCellRenderer" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
+          <Connection code="dateFormatListCellRenderer" type="code"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JRadioButton" name="radioButtonCustomPattern">
+      <Properties>
+        <Property name="buttonGroup" type="javax.swing.ButtonGroup" editor="org.netbeans.modules.form.RADComponent$ButtonGroupPropertyEditor">
+          <ComponentRef name="buttonGroupPatterns"/>
+        </Property>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.i18n.form.FormI18nStringEditor">
+          <ResourceString bundle="de/elmar_baumann/nb/slclock/Bundle.properties" key="StatusLinePreferencesPanel.radioButtonCustomPattern.text" replaceFormat="org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)"/>
+        </Property>
+      </Properties>
+    </Component>
+    <Component class="javax.swing.JTextField" name="textFieldCustomPattern">
+      <Properties>
+        <Property name="columns" type="int" value="14"/>
+      </Properties>
+    </Component>
+    <Container class="javax.swing.JPanel" name="panelExample">
+      <Properties>
+        <Property name="border" type="javax.swing.border.Border" editor="org.netbeans.modules.form.editors2.BorderEditor">
+          <Border info="org.netbeans.modules.form.compat2.border.TitledBorderInfo">
+            <TitledBorder title="Example">
+              <ResourceString PropertyName="titleX" bundle="de/elmar_baumann/nb/slclock/Bundle.properties" key="StatusLinePreferencesPanel.panelExample.border.title" replaceFormat="org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)"/>
+            </TitledBorder>
+          </Border>
+        </Property>
+      </Properties>
+
+      <Layout>
+        <DimensionLayout dim="0">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Group type="102" alignment="0" attributes="0">
+                  <EmptySpace max="-2" attributes="0"/>
+                  <Component id="labelExample" min="-2" pref="325" max="-2" attributes="0"/>
+                  <EmptySpace max="32767" attributes="0"/>
+              </Group>
+          </Group>
+        </DimensionLayout>
+        <DimensionLayout dim="1">
+          <Group type="103" groupAlignment="0" attributes="0">
+              <Component id="labelExample" min="-2" max="-2" attributes="0"/>
+          </Group>
+        </DimensionLayout>
+      </Layout>
+      <SubComponents>
+        <Component class="javax.swing.JLabel" name="labelExample">
+          <Properties>
+            <Property name="text" type="java.lang.String" value=" " noResource="true"/>
+          </Properties>
+        </Component>
+      </SubComponents>
+    </Container>
+    <Component class="javax.swing.JButton" name="buttonApply">
+      <Properties>
+        <Property name="text" type="java.lang.String" editor="org.netbeans.modules.i18n.form.FormI18nStringEditor">
+          <ResourceString bundle="de/elmar_baumann/nb/slclock/Bundle.properties" key="StatusLinePreferencesPanel.buttonApply.text" replaceFormat="org.openide.util.NbBundle.getMessage({sourceFileName}.class, &quot;{key}&quot;)"/>
+        </Property>
+      </Properties>
+      <Events>
+        <EventHandler event="actionPerformed" listener="java.awt.event.ActionListener" parameters="java.awt.event.ActionEvent" handler="buttonApplyActionPerformed"/>
+      </Events>
+    </Component>
+  </SubComponents>
+</Form>
Index: src/de/elmar_baumann/nb/slclock/StatusLinePreferencesPanel.java
--- src/de/elmar_baumann/nb/slclock/StatusLinePreferencesPanel.java Base (BASE)
+++ src/de/elmar_baumann/nb/slclock/StatusLinePreferencesPanel.java Locally New
@@ -0,0 +1,318 @@
+package de.elmar_baumann.nb.slclock;
+
+import java.awt.Component;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.text.DateFormat;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+
+import javax.swing.DefaultComboBoxModel;
+import javax.swing.DefaultListCellRenderer;
+import javax.swing.JComboBox;
+import javax.swing.JLabel;
+import javax.swing.JList;
+import javax.swing.ListCellRenderer;
+import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
+
+import org.openide.util.NbBundle;
+
+/**
+ * @author Elmar Baumann
+ */
+public class StatusLinePreferencesPanel extends javax.swing.JPanel {
+
+    private static final long serialVersionUID = 1L;
+
+    public StatusLinePreferencesPanel() {
+        initComponents();
+        restoreFormat();
+        listen();
+    }
+
+    private void restoreFormat() {
+        DateFormatArray array = StatusLinePreferences.restoreDateFormatArray();
+        int formatCount = array.getSize();
+        if (formatCount > 0) {
+            setDateFormat(array.get(0), comboBoxDateFormat0, null);
+        }
+        if (formatCount > 1) {
+            setDateFormat(array.get(1), comboBoxDateFormat1, comboBoxDelimiter0);
+        }
+        if (formatCount > 2) {
+            setDateFormat(array.get(2), comboBoxDateFormat2, comboBoxDelimiter1);
+        }
+    }
+
+    private void setDateFormat(DateFormatAndDelimiter format, JComboBox cbDateFormat, JComboBox cbDelimiter) {
+        cbDateFormat.setSelectedItem(format.dateFormat);
+        if (cbDelimiter != null) {
+            cbDelimiter.setSelectedItem(format.delimiter);
+        }
+    }
+
+    private void listen() {
+        comboBoxDateFormat0.addActionListener(comboBoxValueChangedListener);
+        comboBoxDateFormat1.addActionListener(comboBoxValueChangedListener);
+        comboBoxDateFormat2.addActionListener(comboBoxValueChangedListener);
+        comboBoxDelimiter0.addActionListener(comboBoxValueChangedListener);
+        comboBoxDelimiter1.addActionListener(comboBoxValueChangedListener);
+    }
+
+    private void persistFormat() {
+        StatusLinePreferences.persistDateFormatArray(createDateFormatArray());
+    }
+
+    private DateFormatArray createDateFormatArray() {
+        DateFormatAndDelimiter format1 = createDateFormatAndDelimiter(comboBoxDateFormat0, null);
+        DateFormatAndDelimiter format2 = createDateFormatAndDelimiter(comboBoxDateFormat1, comboBoxDelimiter0);
+        DateFormatAndDelimiter format3 = createDateFormatAndDelimiter(comboBoxDateFormat2, comboBoxDelimiter1);
+        DateFormatArray array = new DateFormatArray();
+        if (format1 != null) {
+            array.addDateFormat(format1);
+        }
+        if (format2 != null) {
+            array.addDateFormat(format2);
+        }
+        if (format3 != null) {
+            array.addDateFormat(format3);
+        }
+        return array;
+    }
+
+    private DateFormatAndDelimiter createDateFormatAndDelimiter(JComboBox cbDate, JComboBox cbDelimiter) {
+        DateFormatAndDisplayName format = (DateFormatAndDisplayName) cbDate.getSelectedItem();
+        if (format != null) {
+            String delimiter = (String) cbDelimiter.getSelectedItem();
+            return new DateFormatAndDelimiter(format.dateFormat, delimiter == null ? "" : delimiter);
+        }
+        return null;
+    }
+
+    private static class DateFormatAndDisplayName {
+        private final DateFormat dateFormat;
+        private final String displayName;
+
+        private DateFormatAndDisplayName(DateFormat dateFormat, String displayName) {
+            this.dateFormat = dateFormat;
+            this.displayName = displayName;
+        }
+    }
+
+    private static class DateFormatComboBoxModel extends DefaultComboBoxModel {
+
+        private static final long serialVersionUID = 1L;
+
+        private DateFormatComboBoxModel() {
+            addElements();
+        }
+
+        private void addElements() {
+            addElement(null);
+            addElement(new DateFormatAndDisplayName(DateFormat.getTimeInstance(DateFormat.SHORT),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.Time.Short.DisplayName")));
+            addElement(new DateFormatAndDisplayName(DateFormat.getTimeInstance(DateFormat.MEDIUM),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.Time.Medium.DisplayName")));
+            addElement(new DateFormatAndDisplayName(DateFormat.getTimeInstance(DateFormat.LONG),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.Time.Long.DisplayName")));
+            addElement(new DateFormatAndDisplayName(DateFormat.getDateInstance(DateFormat.SHORT),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.Date.Short.DisplayName")));
+            addElement(new DateFormatAndDisplayName(DateFormat.getDateInstance(DateFormat.MEDIUM),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.Date.Medium.DisplayName")));
+            addElement(new DateFormatAndDisplayName(DateFormat.getDateInstance(DateFormat.LONG),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.Date.Long.DisplayName")));
+            addElement(new DateFormatAndDisplayName(new SimpleDateFormat("E"),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.DayOfWeek.Short.DisplayName")));
+            addElement(new DateFormatAndDisplayName(new SimpleDateFormat("EEEE"),
+                    NbBundle.getMessage(StatusLinePreferencesPanel.class, "DateFormat.DayOfWeek.Long.DisplayName")));
+        }
+    }
+
+    private final ListCellRenderer dateFormatListCellRenderer = new DefaultListCellRenderer() {
+        private static final long serialVersionUID = 1L;
+
+        @Override
+        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
+            JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
+            if (value instanceof DateFormatAndDisplayName) {
+                DateFormatAndDisplayName format = (DateFormatAndDisplayName) value;
+                label.setText(format.displayName);
+            }
+            return label;
+        }
+    };
+
+    private static class DelimiterComboBoxModel extends DefaultComboBoxModel {
+        private static final long serialVersionUID = 1L;
+
+        private DelimiterComboBoxModel() {
+            super(new Object[] {"", "-", ":", ".", " "});
+        }
+    }
+
+    private final ActionListener comboBoxValueChangedListener = new ActionListener() {
+
+        public void actionPerformed(ActionEvent e) {
+            DateFormatArray array = createDateFormatArray();
+            labelExample.setText(array.format(new Date()));
+        }
+    };
+
+    private final DocumentListener customFormatChangedDocumentListener = new DocumentListener() {
+
+        public void insertUpdate(DocumentEvent e) {
+            showExample();
+        }
+
+        public void removeUpdate(DocumentEvent e) {
+            showExample();
+        }
+
+        public void changedUpdate(DocumentEvent e) {
+            showExample();
+        }
+
+        private void showExample() {
+            throw new UnsupportedOperationException("Not yet implemented");
+        }
+    };
+
+    /**
+     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
+     * content of this method is always regenerated by the Form Editor.
+     */
+    @SuppressWarnings("unchecked")
+    private void initComponents() {//GEN-BEGIN:initComponents
+
+        buttonGroupPatterns = new javax.swing.ButtonGroup();
+        radioButtonDefaultPattern = new javax.swing.JRadioButton();
+        comboBoxDateFormat0 = new javax.swing.JComboBox();
+        comboBoxDelimiter0 = new javax.swing.JComboBox();
+        comboBoxDateFormat1 = new javax.swing.JComboBox();
+        comboBoxDelimiter1 = new javax.swing.JComboBox();
+        comboBoxDateFormat2 = new javax.swing.JComboBox();
+        radioButtonCustomPattern = new javax.swing.JRadioButton();
+        textFieldCustomPattern = new javax.swing.JTextField();
+        panelExample = new javax.swing.JPanel();
+        labelExample = new javax.swing.JLabel();
+        buttonApply = new javax.swing.JButton();
+
+        buttonGroupPatterns.add(radioButtonDefaultPattern);
+        org.openide.awt.Mnemonics.setLocalizedText(radioButtonDefaultPattern, org.openide.util.NbBundle.getMessage(StatusLinePreferencesPanel.class, "StatusLinePreferencesPanel.radioButtonDefaultPattern.text")); // NOI18N
+
+        comboBoxDateFormat0.setModel(new DateFormatComboBoxModel());
+        comboBoxDateFormat0.setRenderer(dateFormatListCellRenderer);
+
+        comboBoxDelimiter0.setModel(new DelimiterComboBoxModel());
+
+        comboBoxDateFormat1.setModel(new DateFormatComboBoxModel());
+        comboBoxDateFormat1.setRenderer(dateFormatListCellRenderer);
+
+        comboBoxDelimiter1.setModel(new DelimiterComboBoxModel());
+
+        comboBoxDateFormat2.setModel(new DateFormatComboBoxModel());
+        comboBoxDateFormat2.setRenderer(dateFormatListCellRenderer);
+
+        buttonGroupPatterns.add(radioButtonCustomPattern);
+        org.openide.awt.Mnemonics.setLocalizedText(radioButtonCustomPattern, org.openide.util.NbBundle.getMessage(StatusLinePreferencesPanel.class, "StatusLinePreferencesPanel.radioButtonCustomPattern.text")); // NOI18N
+
+        textFieldCustomPattern.setColumns(14);
+
+        panelExample.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(StatusLinePreferencesPanel.class, "StatusLinePreferencesPanel.panelExample.border.title"))); // NOI18N
+
+        org.openide.awt.Mnemonics.setLocalizedText(labelExample, " "); // NOI18N
+
+        javax.swing.GroupLayout panelExampleLayout = new javax.swing.GroupLayout(panelExample);
+        panelExample.setLayout(panelExampleLayout);
+        panelExampleLayout.setHorizontalGroup(
+            panelExampleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
+            .addGroup(panelExampleLayout.createSequentialGroup()
+                .addContainerGap()
+                .addComponent(labelExample, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
+                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+        panelExampleLayout.setVerticalGroup(
+            panelExampleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
+            .addComponent(labelExample)
+        );
+
+        org.openide.awt.Mnemonics.setLocalizedText(buttonApply, org.openide.util.NbBundle.getMessage(StatusLinePreferencesPanel.class, "StatusLinePreferencesPanel.buttonApply.text")); // NOI18N
+        buttonApply.addActionListener(new java.awt.event.ActionListener() {
+            public void actionPerformed(java.awt.event.ActionEvent evt) {
+                buttonApplyActionPerformed(evt);
+            }
+        });
+
+        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
+        this.setLayout(layout);
+        layout.setHorizontalGroup(
+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
+            .addGroup(layout.createSequentialGroup()
+                .addContainerGap()
+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
+                    .addGroup(layout.createSequentialGroup()
+                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
+                            .addComponent(radioButtonCustomPattern)
+                            .addComponent(radioButtonDefaultPattern, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
+                            .addGroup(layout.createSequentialGroup()
+                                .addComponent(comboBoxDateFormat0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                                .addComponent(comboBoxDelimiter0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                                .addComponent(comboBoxDateFormat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                                .addComponent(comboBoxDelimiter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                                .addComponent(comboBoxDateFormat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
+                            .addComponent(textFieldCustomPattern)
+                            .addComponent(panelExample, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+                        .addGap(0, 0, Short.MAX_VALUE))
+                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
+                        .addGap(0, 0, Short.MAX_VALUE)
+                        .addComponent(buttonApply)))
+                .addContainerGap())
+        );
+        layout.setVerticalGroup(
+            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
+            .addGroup(layout.createSequentialGroup()
+                .addContainerGap()
+                .addComponent(radioButtonCustomPattern)
+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
+                    .addComponent(comboBoxDateFormat0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                    .addComponent(comboBoxDelimiter0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                    .addComponent(comboBoxDateFormat1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                    .addComponent(comboBoxDelimiter1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                    .addComponent(comboBoxDateFormat2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
+                .addComponent(radioButtonDefaultPattern)
+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                .addComponent(textFieldCustomPattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                .addComponent(panelExample, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
+                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
+                .addComponent(buttonApply)
+                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
+        );
+    }//GEN-END:initComponents
+
+    private void buttonApplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonApplyActionPerformed
+        persistFormat();
+    }//GEN-LAST:event_buttonApplyActionPerformed
+
+    // Variables declaration - do not modify//GEN-BEGIN:variables
+    private javax.swing.JButton buttonApply;
+    private javax.swing.ButtonGroup buttonGroupPatterns;
+    private javax.swing.JComboBox comboBoxDateFormat0;
+    private javax.swing.JComboBox comboBoxDateFormat1;
+    private javax.swing.JComboBox comboBoxDateFormat2;
+    private javax.swing.JComboBox comboBoxDelimiter0;
+    private javax.swing.JComboBox comboBoxDelimiter1;
+    private javax.swing.JLabel labelExample;
+    private javax.swing.JPanel panelExample;
+    private javax.swing.JRadioButton radioButtonCustomPattern;
+    private javax.swing.JRadioButton radioButtonDefaultPattern;
+    private javax.swing.JTextField textFieldCustomPattern;
+    // End of variables declaration//GEN-END:variables
+}
